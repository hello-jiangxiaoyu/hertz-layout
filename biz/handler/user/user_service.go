// Code generated by hertz generator.

package user

import (
	"context"
	"hertz/demo/internal/response"

	"github.com/cloudwego/hertz/pkg/app"
	"hertz/demo/biz/model/hertz/user"
)

// CreateUserResponse .
// @router /v1/user/create [POST]
func CreateUserResponse(ctx context.Context, c *app.RequestContext) {
	var req user.CreateUserReq
	if err := c.BindAndValidate(&req); err != nil {
		response.ErrorRequest(c, err)
		return
	}

	resp := new(user.CreateUserResp)
	response.SuccessWithData(c, resp)
}

// QueryUserResponse .
// @router /v1/user/query [POST]
func QueryUserResponse(ctx context.Context, c *app.RequestContext) {
	var req user.QueryUserReq
	if err := c.BindAndValidate(&req); err != nil {
		response.ErrorRequest(c, err)
		return
	}

	resp := new(user.QueryUserResp)
	response.SuccessWithData(c, resp)
}

// UpdateUserResponse .
// @router /v1/user/update/:user_id [POST]
func UpdateUserResponse(ctx context.Context, c *app.RequestContext) {
	var req user.UpdateUserReq
	if err := c.BindAndValidate(&req); err != nil {
		response.ErrorRequest(c, err)
		return
	}

	resp := new(user.UpdateUserResp)
	response.SuccessWithData(c, resp)
}

// DeleteUserResponse .
// @router /v1/user/delete/:user_id [POST]
func DeleteUserResponse(ctx context.Context, c *app.RequestContext) {
	var req user.DeleteUserReq
	if err := c.BindAndValidate(&req); err != nil {
		response.ErrorRequest(c, err)
		return
	}

	resp := new(user.DeleteUserResp)
	response.SuccessWithData(c, resp)
}
