// Code generated by hertz generator.

package oauth

import (
	"context"
	"github.com/golang-jwt/jwt/v5"
	"hertz/demo/biz/model/hertz/oauth"
	"hertz/demo/internal/response"
	"hertz/demo/internal/utils"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// GetToken .
// @Description	获取access token
// @Tags		oidc
// @Param		client_id		query	string	true	"oauth2 client_id"
// @Param		client_secret	query	string	true	"oauth2 client_secret"
// @Success		200
// @router		/v1/hertz/auth2/token [POST]
func GetToken(_ context.Context, c *app.RequestContext) {
	var req oauth.TokenReq
	if err := a.SetReqWithSub(c, &req).Error; err != nil {
		response.ErrorRequest(c, err)
		return
	}
	// todo: validate client

	now := time.Now()
	accessToken, err := utils.SigneTokenString(jwt.RegisteredClaims{
		Issuer:    "hertz-layout",                                          // token签发者
		Subject:   req.ClientID,                                            // 用户id
		ExpiresAt: jwt.NewNumericDate(now.Add(ExpireSecond * time.Second)), // 过期时间
		NotBefore: jwt.NewNumericDate(now.Add(time.Second * -10)),          // 生效时间
	})
	if err != nil {
		response.ErrorUnknown(c, err, "signe token string err")
		return
	}

	c.JSON(consts.StatusOK, map[string]any{"access_token": accessToken})
}

// GetJWKs .
// @Description	获取jwk公钥
// @Tags		oidc
// @Success		200
// @router		/v1/hertz/.well-known/jwks.json [GET]
func GetJWKs(_ context.Context, c *app.RequestContext) {
	jwks, err := utils.GetJWKPublic()
	if err != nil {
		response.ErrorUnknown(c, err, "get JWKs err")
		return
	}

	c.JSON(consts.StatusOK, jwks)
}
