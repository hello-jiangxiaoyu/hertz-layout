// Code generated by hertz generator.

package oauth

import (
	"context"
	"hertz/demo/biz/handler/internal"
	"hertz/demo/biz/model/hertz/oauth"
	"hertz/demo/internal/response"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

var a internal.Api

// LoginPassword .
// @Description	账号密码登录
// @Tags		login
// @Param		username	formData	string	true	"账号"
// @Param		password	formData	string	true	"密码"
// @Success		200
// @router		/v1/hertz/auth2/login [POST]
func LoginPassword(_ context.Context, c *app.RequestContext) {
	var req oauth.LoginReq
	if err := a.SetReqWithSub(c, &req).Error; err != nil {
		response.ErrorRequest(c, err)
		return
	}

	resp := new(oauth.CommonResp)

	c.JSON(consts.StatusOK, resp)
}

// LoginProvider .
// @Description	第三方登录
// @Tags		login
// @Param		type	path	string	true	"第三方登录类型"
// @Success		200
// @router		/v1/hertz/auth2/login/{type} [POST]
func LoginProvider(_ context.Context, c *app.RequestContext) {
	var req oauth.TypeReq
	if err := a.SetReqWithSub(c, &req).Error; err != nil {
		response.ErrorRequest(c, err)
		return
	}

	resp := new(oauth.CommonResp)

	c.JSON(consts.StatusOK, resp)
}

// GetProfile .
// @Description	获取个人信息
// @Tags		login
// @Success		200
// @router		/v1/hertz/me/profile [GET]
func GetProfile(_ context.Context, c *app.RequestContext) {
	var req oauth.NoReq
	if err := a.SetReqWithSub(c, &req).Error; err != nil {
		response.ErrorRequest(c, err)
		return
	}

	resp := new(oauth.CommonResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateProfile .
// @Description	修改个人信息
// @Tags		login
// @Param		bd	body	oauth.User	true	"个人信息请求体"
// @Success		200
// @router		/v1/hertz/me/profile [PUT]
func UpdateProfile(_ context.Context, c *app.RequestContext) {
	var req oauth.User
	if err := a.SetReqWithSub(c, &req).Error; err != nil {
		response.ErrorRequest(c, err)
		return
	}

	resp := new(oauth.CommonResp)

	c.JSON(consts.StatusOK, resp)
}

// Logout .
// @Description	登出
// @Tags		login
// @Success		200
// @router		/v1/hertz/auth2/logout [POST]
func Logout(_ context.Context, c *app.RequestContext) {
	var req oauth.NoReq
	if err := a.SetReqWithSub(c, &req).Error; err != nil {
		response.ErrorRequest(c, err)
		return
	}

	resp := new(oauth.CommonResp)

	c.JSON(consts.StatusOK, resp)
}
