// Code generated by hertz generator.

package oauth

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/golang-jwt/jwt/v5"
	"hertz/demo/biz/dal/mysql"
	"hertz/demo/biz/handler/internal"
	"hertz/demo/biz/model/hertz/oauth"
	"hertz/demo/internal/conf"
	"hertz/demo/internal/response"
	"hertz/demo/internal/utils"
	"strconv"
	"time"
)

const (
	ExpireSecond = 3600 * 24 * 7
)

var a internal.Api

// LoginPassword .
// @Description	账号密码登录
// @Tags		login
// @Param		username	formData	string	true	"账号"
// @Param		password	formData	string	true	"密码"
// @Success		200
// @router		/v1/hertz/auth2/login [POST]
func LoginPassword(_ context.Context, c *app.RequestContext) {
	var req oauth.LoginReq
	if err := a.SetReq(c, &req).Error; err != nil {
		response.ErrorRequest(c, err)
		return
	}
	user, err := mysql.GetUserByName(req.Username)
	if err != nil {
		response.ErrorRequest(c, err)
		return
	}
	if !utils.CheckPasswordHash(req.Password, user.Password) {
		response.ErrorForbidden(c, "password err")
		return
	}

	now := time.Now()
	tokenString, err := utils.SigneTokenString(jwt.RegisteredClaims{
		Issuer:    "hertz-layout",                                          // token签发者
		Subject:   strconv.FormatInt(user.ID, 10),                          // 用户id
		ExpiresAt: jwt.NewNumericDate(now.Add(ExpireSecond * time.Second)), // 过期时间
		NotBefore: jwt.NewNumericDate(now.Add(time.Second * -10)),          // 生效时间
	})
	if err != nil {
		response.ErrorUnknown(c, err, "signe token string err")
		return
	}

	c.SetCookie(conf.DefaultCookieKey, tokenString, ExpireSecond, "/", string(c.Host()), protocol.CookieSameSiteNoneMode, false, true)

	response.Success(c)
}

// LoginProvider .
// @Description	第三方登录
// @Tags		login
// @Param		type	path	string	true	"第三方登录类型"
// @Success		200
// @router		/v1/hertz/auth2/login/{type} [POST]
func LoginProvider(_ context.Context, c *app.RequestContext) {
	var req oauth.TypeReq
	if err := a.SetReqWithSub(c, &req).Error; err != nil {
		response.ErrorRequest(c, err)
		return
	}

	resp := new(oauth.CommonResp)

	c.JSON(consts.StatusOK, resp)
}

// GetProfile .
// @Description	获取个人信息
// @Tags		login
// @Success		200
// @router		/v1/hertz/me/profile [GET]
func GetProfile(_ context.Context, c *app.RequestContext) {
	var req oauth.NoReq
	if err := a.SetReqWithSub(c, &req).Error; err != nil {
		response.ErrorRequest(c, err)
		return
	}

	resp := new(oauth.CommonResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateProfile .
// @Description	修改个人信息
// @Tags		login
// @Param		bd	body	oauth.User	true	"个人信息请求体"
// @Success		200
// @router		/v1/hertz/me/profile [PUT]
func UpdateProfile(_ context.Context, c *app.RequestContext) {
	var req oauth.User
	if err := a.SetReqWithSub(c, &req).Error; err != nil {
		response.ErrorRequest(c, err)
		return
	}

	resp := new(oauth.CommonResp)

	c.JSON(consts.StatusOK, resp)
}

// Logout .
// @Description	登出
// @Tags		login
// @Success		200
// @router		/v1/hertz/auth2/logout [POST]
func Logout(_ context.Context, c *app.RequestContext) {
	var req oauth.NoReq
	if err := a.SetReqWithSub(c, &req).Error; err != nil {
		response.ErrorRequest(c, err)
		return
	}

	resp := new(oauth.CommonResp)

	c.JSON(consts.StatusOK, resp)
}
